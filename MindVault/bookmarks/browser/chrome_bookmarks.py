"""This module reads the Chrome Bookmarks from all profiles and returns a list of bookmarks."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/01_chrome_bookmarks.ipynb.

# %% auto 0
__all__ = ['ChromeBookmarks', 'BookmarkModel', 'windows_epoch_to_datetime']

# %% ../../../nbs/01_chrome_bookmarks.ipynb 4
import json
import os
import sys
from datetime import date, datetime, timedelta
from pathlib import Path

from fastcore.all import patch
from pydantic import BaseModel, Field


# %% ../../../nbs/01_chrome_bookmarks.ipynb 5
class ChromeBookmarks:
    """
    A class to interact with Chrome Bookmarks.
    """

    user_data_dir_paths = {
        "Windows": r"~\AppData\Local\Google\Chrome\User Data",
        "Mac": r"~\Library\Application Support\Google\Chrome",
        "Linux": r"~\.config\google-chrome",
    }

    def __init__(self):
        self.operating_system = None
        if "win" in sys.platform.lower():
            self.operating_system = "Windows"
        elif "mac" in sys.platform.lower():
            self.operating_system = "Mac"
        elif "linux" in sys.platform.lower():
            self.operating_system = "Linux"
        else:
            self.operating_system = "Unknown"
        self.user_data_dir_path = os.path.expanduser(
            self.user_data_dir_paths[self.operating_system]
        )


# %% ../../../nbs/01_chrome_bookmarks.ipynb 6
@patch
def get_chrome_bookmarks_files(self: ChromeBookmarks):
    chrome_path = Path(self.user_data_dir_path)
    # find all bookmarks files in chrome_path
    bookmarks_files = list(chrome_path.glob("**/*Bookmarks"))
    # Ignore the snapshot files
    bookmarks_files = [
        file.as_posix() for file in bookmarks_files if "Snapshot" not in file.as_posix()
    ]
    return bookmarks_files

# %% ../../../nbs/01_chrome_bookmarks.ipynb 7
class BookmarkModel(BaseModel):
    """
    A model representing a bookmark.
    """

    name: str = Field(..., description="The name of the bookmark")
    url: str = Field(..., description="The URL of the bookmark")
    folder: str = Field(..., description="The folder of the bookmark")
    date_added: date = Field(..., description="The date the bookmark was added")

    def __str__(self):
        return f"{self.name} ({self.url}) added on {self.date_added}"

    __repr__ = __str__

# %% ../../../nbs/01_chrome_bookmarks.ipynb 8
def windows_epoch_to_datetime(windows_timestamp):
    """Convert Windows epoch timestamp to datetime object."""
    windows_epoch = datetime(1601, 1, 1)
    delta = timedelta(microseconds=int(windows_timestamp))
    return (windows_epoch + delta).date()

# %% ../../../nbs/01_chrome_bookmarks.ipynb 9
@patch
def extract_bookmark_info(
    self: ChromeBookmarks,
    bookmarks_file_path: str,  # path to the bookmarks file
) -> list[BookmarkModel]:
    """Extracts bookmark information from a Chrome Bookmarks file."""
    with open(bookmarks_file_path, "r", encoding="utf-8") as f:
        bookmarks_data = json.load(f)

    bookmarks = []

    def traverse_bookmarks(node, folder=None):
        """Recursively traverses the bookmark tree."""
        if node["type"] == "url":
            date_added = windows_epoch_to_datetime(node["date_added"])
            bookmarks.append(
                BookmarkModel(
                    name=node["name"],
                    url=node["url"],
                    folder=folder,
                    date_added=date_added,
                )
            )
        elif node["type"] == "folder":
            for child in node["children"]:
                traverse_bookmarks(child, folder=node["name"])

    for root_name, root_node in bookmarks_data["roots"].items():
        traverse_bookmarks(root_node, folder=root_name)

    return bookmarks

# %% ../../../nbs/01_chrome_bookmarks.ipynb 10
@patch
def extract_all_chrome_bookmarks(self: ChromeBookmarks) -> list[BookmarkModel]:
    """Extracts all Chrome Bookmarks from all profiles."""
    bookmarks_files = self.get_chrome_bookmarks_files()
    bookmarks = []
    for bookmarks_file in bookmarks_files:
        bookmarks.extend(self.extract_bookmark_info(bookmarks_file))
    return bookmarks

# %% ../../../nbs/01_chrome_bookmarks.ipynb 11
if __name__ == "__main__":
    chrome_bookmarks = ChromeBookmarks()
    bookmarks = chrome_bookmarks.extract_all_chrome_bookmarks()
    print(bookmarks)
